name: Release
on:
  workflow_dispatch:

jobs:
  authorization:
    runs-on: ubuntu-latest
    steps:
      - name: Build
        env:
          AUTHORIZED: ${{ github.actor == 'trask' }}
        run: |
          if [[ $AUTHORIZED != "true" ]]; then
            echo user ${{ github.actor }} is not authorized to run this workflow
            exit 1
          fi

  build:
    needs:
      - authorization
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

        # TODO replace with your build

      - uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Build
        run: |
          pip install -e .

  release:
    runs-on: ubuntu-latest
    needs:
      - build
    outputs:
      version: ${{ steps.create-github-release.outputs.version }}
    steps:
      - run: |
          if [[ $GITHUB_REF_NAME != release/* ]]; then
            echo this workflow should only be run against release branches
            exit 1
          fi

      - uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          version=$(.github/scripts/get-version.sh)
          if [[ $version =~ ^([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
          else
            echo "unexpected version: $version"
            exit 1
          fi
          if [[ $patch != 0 ]]; then
            patched_version="$major.$minor.$((patch - 1))"
          fi
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "PATCHED_VERSION=$patched_version" >> $GITHUB_ENV

        # check out main branch to verify there won't be problems with merging the change log
        # at the end of this workflow
      - uses: actions/checkout@v3
        with:
          ref: main

      - name: Check that change log update was merged to main
        run: |
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.0 ]]; then
            # not making a patch release
            if ! grep --quiet "^## Version $VERSION " CHANGELOG.md; then
              echo the pull request generated by prepare-release-branch.yml needs to be merged first
              exit 1
            fi
          fi

        # back to the release branch
      - uses: actions/checkout@v3

      # TODO publish if applicable (e.g. to PyPI)

      - name: Generate release notes
        run: |
          # conditional block not indented because of the heredoc
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.0 ]]; then
          cat > /tmp/release-notes.txt << EOF
          This is a patch release on the previous $PATCHED_VERSION release, fixing the issue(s) below.

          EOF
          fi

          # the complex perl regex is needed because markdown docs render newlines as soft wraps
          # while release notes render them as line breaks
          sed -n "0,/^## Version $VERSION /d;/^## Version /q;p" CHANGELOG.md \
            | perl -0pe 's/(?<!\n)\n *(?!\n)(?![-*] )(?![1-9]+\. )/ /g' \
            >> /tmp/release-notes.txt

      - id: create-github-release
        name: Create GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # TODO check that discussion category "announcements" exists
          #      or remove --discussions-category if discussions are not enabled in your repository
          gh release create --target $GITHUB_REF_NAME \
                            --title "Version $VERSION" \
                            --notes-file /tmp/release-notes.txt \
                            --discussion-category announcements \
                            v$VERSION

          echo "version=$VERSION" >> $GITHUB_OUTPUT

  merge-change-log-to-main:
    needs:
      - release
    uses: trask/.github/.github/workflows/merge-change-log-to-main.yml@main

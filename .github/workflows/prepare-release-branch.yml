name: Prepare release branch
on:
  workflow_dispatch:

jobs:
  prereqs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - run: |
          if [[ $GITHUB_REF_NAME != main ]]; then
            echo this workflow should only be run against main
            exit 1
          fi

          if ! grep --quiet "^## Unreleased$" CHANGELOG.md; then
            echo the change log is missing an \"Unreleased\" section
            exit 1
          fi

  create-pull-request-against-release-branch:
    runs-on: ubuntu-latest
    needs: prereqs
    steps:
      - uses: actions/checkout@v3

      - name: Create release branch
        id: create-release-branch
        run: |
          version=$(.github/scripts/get-version.sh)
          # TODO update with your main branch versioning strategy
          version=${version//-dev/}
          if [[ $version =~ ^([0-9]+)\.([0-9]+)\.0$ ]]; then
            release_branch_name=$(echo $version | sed -E 's/([0-9]+)\.([0-9]+)\.0/release\/v\1.\2.x/')
          elif [[ $version =~ ^([0-9]+)\.([0-9]+)\.0 ]]; then
            # pre-release version, e.g. 1.9.0rc
            release_branch_name="release/v$version"
          else
            echo "unexpected version: $version"
            exit 1
          fi

          git push origin HEAD:$release_branch_name

          echo "VERSION=$version" >> $GITHUB_ENV
          echo "RELEASE_BRANCH_NAME=$release_branch_name" >> $GITHUB_ENV

      - name: Update version
        run: .github/scripts/update-version.sh $VERSION

      - name: Update the change log with the approximate release date
        run: |
          date=$(date "+%Y-%m-%d")
          sed -Ei "s/^## Unreleased$/## Version $VERSION ($date)/" CHANGELOG.md

      - name: Set git user
        run: .github/scripts/set-git-user.sh

      - name: Create pull request against the release branch
        env:
          # not using secrets.GITHUB_TOKEN since pull requests from that token do not run workflows
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          message="Prepare release $VERSION"
          branch="prepare-release-${VERSION}"

          git commit -a -m "$message"
          git push origin HEAD:$branch
          gh pr create --title "[$RELEASE_BRANCH_NAME] $message" \
                       --body "$message." \
                       --head $branch \
                       --base $RELEASE_BRANCH_NAME

  create-pull-request-against-main:
    runs-on: ubuntu-latest
    needs: prereqs
    steps:
      - uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          version=$(.github/scripts/get-version.sh)
          if [[ $version =~ ^([0-9]+)\.([0-9]+)\.0-dev$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            next_version="$major.$((minor + 1)).0"
          elif [[ $version =~ ^([0-9]+)\.([0-9]+)\.0 ]]; then
            # pre-release version, e.g. 1.9.0rc
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            next_version="$major.$minor.0"
          else
            echo "unexpected version: $version"
            exit 1
          fi
          # TODO update with your main branch versioning strategy
          next_version="${next_version}-dev"
          echo "NEXT_VERSION=$next_version" >> $GITHUB_ENV

      - name: Update version
        run: .github/scripts/update-version.sh $NEXT_VERSION

      - name: Update the change log on main
        run: |
          sed -Ei "s/## Unreleased/## Unreleased\n\n## Version $VERSION (Unreleased)/" CHANGELOG.md

      - name: Set git user
        run: .github/scripts/set-git-user.sh

      - name: Create pull request against main
        env:
          # not using secrets.GITHUB_TOKEN since pull requests from that token do not run workflows
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          message="Update version to $NEXT_VERSION"
          body="Update version to \`$NEXT_VERSION\`."
          branch="update-version-to-${NEXT_VERSION}"

          git commit -a -m "$message"
          git push origin HEAD:$branch
          gh pr create --title "$message" \
                       --body "$body" \
                       --head $branch \
                       --base main
